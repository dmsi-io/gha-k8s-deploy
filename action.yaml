name: 'Deploy Kubernetes Application'
description: 'Used to handle the gcloud and kubectl setup to deploy Docker images to Google Container Registry and deploy an application to the Kubernetes cluster.'

inputs:
  GCP_SA_KEY: 
    description: 'GCP Service Account Key (JSON)'
    required: true
  GKE_CLUSTER_NAME:
    description: 'Google Kubernetes Engine Cluster name'
    required: true
  GCP_ZONE: 
    description: 'GCP Zone'
    required: true
  GCP_PROJECT_ID:
    description: 'GCP Project ID'
    required: true
  k8s_directory: 
    description: 'Location of k8s config files'
    required: false
    default: 'k8s'
  namespace:
    description: 'Filename of namespace config'
    required: false
    default: 'namespace.yaml'
  configmap:
    description: 'Filename of configmap config'
    required: false
    default: 'configmap.yaml'
  deployment:
    description: 'Filename of deployment config'
    required: false
    default: 'deployment.yaml'
  service:
    description: 'Filename of service config'
    required: false
    default: 'service.yaml'
  ingress:
    description: 'Filename of ingress config'
    required: false
    default: 'ingress.yaml'
  skip_docker:
    description: 'Flag to skip docker build and push steps'
    required: false
    default: 'false'
  docker_directory:
    description: 'Directory of Dockerfile'
    required: false
    default: './'

runs: 
  using: 'composite'
  steps:
    - name: Environment
      run: |
        env | sort
        sudo apt-get install gettext
      shell: bash

    ####### Check file existence #######

    - name: "Check namespace existence"
      id: namespace_exists
      uses: andstor/file-existence-action@v1.0.1
      with:
        files: "${{ inputs.namespace }}"
        allow_failure: 'true'
      working-directory: ${{ inputs.k8s_directory }}
    
    - name: "Check configmap existence"
      id: configmap_exists
      uses: andstor/file-existence-action@v1.0.1
      with:
        files: "${{ inputs.configmap }}"
        allow_failure: 'true'
      working-directory: ${{ inputs.k8s_directory }}

    - name: "Check deployment existence"
      id: deployment_exists
      uses: andstor/file-existence-action@v1.0.1
      with:
        files: "${{ inputs.deployment }}"
        allow_failure: 'true'
      working-directory: ${{ inputs.k8s_directory }}

    - name: "Check service existence"
      id: service_exists
      uses: andstor/file-existence-action@v1.0.1
      with:
        files: "${{ inputs.service }}"
        allow_failure: 'true'
      working-directory: ${{ inputs.k8s_directory }}

    - name: "Check ingress existence"
      id: ingress_exists
      uses: andstor/file-existence-action@v1.0.1
      with:
        files: "${{ inputs.ingress }}"
        allow_failure: 'true'
      working-directory: ${{ inputs.k8s_directory }}

    ###### GCloud Setup ######

    - name: Setup GCloud Auth
      id: auth
      uses: google-github-actions/auth@v0.4.0
      with:
        credentials_json: ${{ inputs.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.1

    - name: Use gcloud CLI
      run: gcloud info
      shell: bash

    ###### Build and Publish Docker Image ######

    - name: Authenticate Docker
      if: inputs.skip_docker == 'false'
      run: gcloud auth configure-docker
      shell: bash

    - name: Containerize
      if: inputs.skip_docker == 'false'
      run: docker build -t $BUILD_IMAGE .
      working-directory: ${{ inputs.docker_directory }}
      shell: bash

    - name: Publish
      if: inputs.skip_docker == 'false'
      run: docker push $BUILD_IMAGE
      shell: bash

    ###### Deploy Kubernetes Artifacts ######

    - name: Authenticate GKE cluster
      run: gcloud container clusters get-credentials ${{ inputs.GKE_CLUSTER_NAME }} --zone ${{ inputs.GCP_ZONE }} --project ${{ inputs.GCP_PROJECT_ID }}
      shell: bash

    - name: Deploy Namespace
      if: steps.namespace_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.namespace }} | envsubst
        cat ${{ inputs.namespace }} | envsubst | kubectl apply -f - 
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Deploy ConfigMap
      if: steps.configmap_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.configmap }} | envsubst
        cat ${{ inputs.configmap }} | envsubst | kubectl apply -n $NAMESPACE -f - 
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Deploy Deployment
      if: steps.deployment_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.deployment }} | envsubst
        cat ${{ inputs.deployment }} | envsubst | kubectl apply -n $NAMESPACE -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Deploy Service
      if: steps.service_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.service }} | envsubst
        cat ${{ inputs.service }} | envsubst | kubectl apply -n $NAMESPACE -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Deploy Ingress
      if: steps.ingress_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.ingress }} | envsubst
        cat ${{ inputs.ingress }} | envsubst | kubectl apply -n $NAMESPACE -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Check deployment status
      if: steps.deployment_exists.outputs.files_exists == 'true'
      run: kubectl rollout status deployment/$SERVICE_NAME -n $NAMESPACE
      shell: bash
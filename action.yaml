name: 'Deploy Kubernetes Application'
description: 'Used to handle the gcloud and kubectl setup to deploy Docker images to Google Container Registry and deploy an application to the Kubernetes cluster.'

inputs:
  GCP_IDENTITY_PROVIDER:
    description: 'GCP Workload Identity Provider'
    required: false

  GCP_SERVICE_ACCOUNT:
    description: 'GCP Service Account email'
    required: false

  GCP_SA_KEY:
    description: 'GCP Service Account Key (JSON)'
    required: false
    deprecationMessage: 'It is recommended to instead use Workload Identity Federation with the GCP_IDENTITY_PROVIDER and GCP_SERVICE_ACCOUNT inputs.'

  GKE_CLUSTER_NAME:
    description: 'Google Kubernetes Engine Cluster name'
    required: true

  GCP_ZONE:
    description: 'GCP Zone'
    required: true

  GCP_PROJECT_ID:
    description: 'GCP Project ID'
    required: true

  print_gcloud_info:
    description: 'Flag to optionally print gcloud info after authenticating'
    required: false
    default: 'false'

  print_environment:
    description: 'Flag to optionally print environment variables'
    required: false
    default: 'false'

  k8s_directory:
    description: 'Location of k8s config files'
    required: false
    default: 'k8s'

  namespace:
    description: 'Filename of namespace config'
    required: false
    default: 'namespace.yaml'

  secret:
    description: 'Name of secret to copy from default namespace'
    required: false

  configmap:
    description: 'Filename of configmap config'
    required: false
    default: 'configmap.yaml'

  deployment:
    description: 'Filename of deployment config'
    required: false
    default: 'deployment.yaml'

  service:
    description: 'Filename of service config'
    required: false
    default: 'service.yaml'

  ingress:
    description: 'Filename of ingress config'
    required: false
    default: 'ingress.yaml'

  skip_docker:
    description: 'Flag to skip docker build and push steps'
    required: false
    default: 'false'

  docker_directory:
    description: 'Directory of Dockerfile'
    required: false
    default: './'

  skip_k8s_deploy:
    description: 'Flag to skip Kubernetes artifact deployment steps'
    required: false
    default: 'false'

  skip_deploy_status:
    description: 'Flag to skip deployment status check'
    required: false
    default: 'false'

outputs:
  url:
    description: 'URL'
    value: ${{ steps.URL.outputs.URL }}

runs:
  using: 'composite'
  steps:
    - name: environment
      if: inputs.print_environment == 'true'
      run: env | sort
      shell: bash

    ####### Check file existence #######

    - name: 'Check namespace existence'
      id: namespace_exists
      run: |
        if [ -f "${{ inputs.k8s_directory }}/${{ inputs.namespace }}" ]; then
          echo "files_exists=true" >> $GITHUB_OUTPUT
        else
          echo "files_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: 'Check configmap existence'
      id: configmap_exists
      run: |
        if [ -f "${{ inputs.k8s_directory }}/${{ inputs.configmap }}" ]; then
          echo "files_exists=true" >> $GITHUB_OUTPUT
        else
          echo "files_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: 'Check deployment existence'
      id: deployment_exists
      run: |
        if [ -f "${{ inputs.k8s_directory }}/${{ inputs.deployment }}" ]; then
          echo "files_exists=true" >> $GITHUB_OUTPUT
        else
          echo "files_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: 'Check service existence'
      id: service_exists
      run: |
        if [ -f "${{ inputs.k8s_directory }}/${{ inputs.service }}" ]; then
          echo "files_exists=true" >> $GITHUB_OUTPUT
        else
          echo "files_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: 'Check ingress existence'
      id: ingress_exists
      run: |
        if [ -f "${{ inputs.k8s_directory }}/${{ inputs.ingress }}" ]; then
          echo "files_exists=true" >> $GITHUB_OUTPUT
        else
          echo "files_exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    ###### GCloud Setup ######

    - name: Setup GCloud Auth
      id: auth
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ inputs.GCP_IDENTITY_PROVIDER }}
        service_account: ${{ inputs.GCP_SERVICE_ACCOUNT }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Use gcloud CLI
      if: inputs.print_gcloud_info == 'true'
      run: gcloud info
      shell: bash

    ###### Build and Publish Docker Image ######

    - name: Authenticate Docker
      if: inputs.skip_docker != 'true'
      run: gcloud auth configure-docker
      shell: bash

    - name: Containerize
      if: inputs.skip_docker != 'true'
      run: docker build -t $BUILD_IMAGE .
      working-directory: ${{ inputs.docker_directory }}
      shell: bash

    - name: Create Develop Image
      if: inputs.skip_docker != 'true' && github.ref_name == 'develop'
      run: |
        docker image tag $BUILD_IMAGE "${BUILD_IMAGE%:*}:develop"
      shell: bash

    - name: Create Latest Image
      if: inputs.skip_docker != 'true' && github.ref_type == 'tag'
      run: |
        docker image tag $BUILD_IMAGE "${BUILD_IMAGE%:*}:latest"
      shell: bash

    - name: Publish Tags
      if: inputs.skip_docker != 'true'
      run: docker image push --all-tags ${BUILD_IMAGE%:*}
      shell: bash

    ###### Deploy Kubernetes Artifacts ######

    - name: Authenticate GKE cluster
      id: get-credentials
      if: inputs.skip_k8s_deploy != 'true'
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ inputs.GKE_CLUSTER_NAME }}
        location: ${{ inputs.GCP_ZONE }}
        project_id: ${{ inputs.GCP_PROJECT_ID }}

    - name: Deploy Namespace
      if: inputs.skip_k8s_deploy != 'true' && steps.namespace_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.namespace }} | envsubst
        cat ${{ inputs.namespace }} | envsubst | kubectl apply -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Output URL
      id: URL
      if: inputs.skip_k8s_deploy != 'true' && steps.namespace_exists.outputs.files_exists == 'true'
      run: echo "URL=https://$HOSTNAME" >> $GITHUB_OUTPUT
      shell: bash

    - name: Copy secret to namespace
      if: inputs.skip_k8s_deploy != 'true' && inputs.secret != ''
      run: |
        if kubectl get secret ${{ inputs.secret }} -n $NAMESPACE --ignore-not-found | grep ${{ inputs.secret }}; then 
          echo "secrets file already exists in namespace..." 
        else 
          echo "secret file does not exist in namespace, copying..."
          if kubectl get secret ${{ inputs.secret }} --ignore-not-found | grep ${{ inputs.secret }}; then
            kubectl get secret ${{ inputs.secret }} -o json \
            | jq 'del(.metadata["namespace","creationTimestamp","resourceVersion","selfLink","uid"])' \
            | kubectl apply -n $NAMESPACE -f -
          else
            echo "did not find secret in default namespace"
          fi
        fi
      shell: bash

    - name: Deploy ConfigMap
      if: inputs.skip_k8s_deploy != 'true' && steps.configmap_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.configmap }} | envsubst
        cat ${{ inputs.configmap }} | envsubst | kubectl apply -n $NAMESPACE -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Deploy Deployment
      if: inputs.skip_k8s_deploy != 'true' && steps.deployment_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.deployment }} | envsubst
        cat ${{ inputs.deployment }} | envsubst | kubectl apply -n $NAMESPACE -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Deploy Service
      if: inputs.skip_k8s_deploy != 'true' && steps.service_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.service }} | envsubst
        cat ${{ inputs.service }} | envsubst | kubectl apply -n $NAMESPACE -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Deploy Ingress
      if: inputs.skip_k8s_deploy != 'true' && steps.ingress_exists.outputs.files_exists == 'true'
      run: |
        cat ${{ inputs.ingress }} | envsubst
        cat ${{ inputs.ingress }} | envsubst | kubectl apply -n $NAMESPACE -f -
      shell: bash
      working-directory: ${{ inputs.k8s_directory }}

    - name: Check deployment status
      if: inputs.skip_k8s_deploy != 'true' && inputs.skip_deploy_status != 'true' && steps.deployment_exists.outputs.files_exists == 'true'
      run: kubectl rollout status deployment/$SERVICE_NAME -n $NAMESPACE
      shell: bash
